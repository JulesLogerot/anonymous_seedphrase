"""
Application Streamlit pour le chiffrement et d√©chiffrement de seed phrases.

Cette application permet de chiffrer et d√©chiffrer de mani√®re s√©curis√©e
les seed phrases de portefeuilles de cryptomonnaies.
"""

import io
import os
import sys
import tempfile
from pathlib import Path

import streamlit as st
from cryptography.fernet import InvalidToken

# Ajouter le r√©pertoire parent au path pour importer le module crypto
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.crypto.encryption import SeedPhraseEncryptor


def init_session_state():
    """Initialise les variables de session."""
    if "encrypted_data" not in st.session_state:
        st.session_state.encrypted_data = None
    if "metadata" not in st.session_state:
        st.session_state.metadata = None
    if "decrypted_seedphrase" not in st.session_state:
        st.session_state.decrypted_seedphrase = None


def main():
    """Fonction principale de l'application."""
    # Configuration de la page
    st.set_page_config(
        page_title="Anonymous Seedphrase Encryptor",
        page_icon="üîê",
        layout="wide",
        initial_sidebar_state="collapsed",
    )

    init_session_state()

    # En-t√™te
    st.title("üîê Anonymous Seedphrase Encryptor")
    st.markdown(
        """
        Chiffrez et s√©curisez vos seed phrases de cryptomonnaies avec un chiffrement AES-128.

        **S√©curit√©** : Vos donn√©es sont chiffr√©es localement et ne sont jamais envoy√©es sur un serveur.
        """
    )

    # Avertissement de s√©curit√©
    st.warning(
        """
        ‚ö†Ô∏è **Avertissements importants :**
        - Ne partagez JAMAIS votre seed phrase avec qui que ce soit
        - Conservez plusieurs copies de votre fichier chiffr√© dans des endroits s√ªrs
        - N'oubliez PAS votre mot de passe - il ne peut pas √™tre r√©cup√©r√©
        - Testez d'abord avec une seed phrase de test avant d'utiliser vos vraies seed phrases
        """
    )

    st.markdown("---")

    # Cr√©er deux onglets
    tab1, tab2 = st.tabs(["üîí Chiffrer une seed phrase", "üîì D√©chiffrer une seed phrase"])

    encryptor = SeedPhraseEncryptor()

    # ========== ONGLET 1 : CHIFFREMENT ==========
    with tab1:
        st.header("Chiffrer votre seed phrase")

        st.markdown(
            """
            Entrez votre seed phrase et un mot de passe fort pour la chiffrer.
            Vous pourrez ensuite t√©l√©charger le fichier chiffr√©.
            """
        )

        # Zone de texte pour la seed phrase
        seedphrase_input = st.text_area(
            "Seed phrase",
            height=100,
            placeholder="Entrez votre seed phrase (12, 15, 18, 21 ou 24 mots s√©par√©s par des espaces)",
            help="Entrez les mots de votre seed phrase s√©par√©s par des espaces",
        )

        # Champ mot de passe
        password_encrypt = st.text_input(
            "Mot de passe de chiffrement",
            type="password",
            help="Choisissez un mot de passe fort (minimum 8 caract√®res). N'oubliez pas ce mot de passe !",
        )

        # Confirmation du mot de passe
        password_encrypt_confirm = st.text_input(
            "Confirmez le mot de passe",
            type="password",
            help="Entrez √† nouveau le mot de passe",
        )

        col1, col2, col3 = st.columns([1, 1, 2])

        with col1:
            encrypt_button = st.button("üîí Chiffrer", type="primary", use_container_width=True)

        # Bouton de chiffrement
        if encrypt_button:
            # Validations
            if not seedphrase_input.strip():
                st.error("‚ùå Veuillez entrer une seed phrase")
            elif not password_encrypt:
                st.error("‚ùå Veuillez entrer un mot de passe")
            elif password_encrypt != password_encrypt_confirm:
                st.error("‚ùå Les mots de passe ne correspondent pas")
            else:
                # Valider le format de la seed phrase
                is_valid, message = encryptor.validate_seedphrase_format(seedphrase_input)

                if not is_valid:
                    st.error(f"‚ùå {message}")
                else:
                    try:
                        # Chiffrer la seed phrase
                        with st.spinner("Chiffrement en cours..."):
                            encrypted_data, metadata = encryptor.encrypt_seedphrase(
                                seedphrase_input, password_encrypt
                            )

                        # Stocker dans la session
                        st.session_state.encrypted_data = encrypted_data
                        st.session_state.metadata = metadata

                        st.success("‚úÖ Seed phrase chiffr√©e avec succ√®s !")
                        st.info(f"üìä M√©tadonn√©es : {metadata['algorithm']}")

                    except ValueError as e:
                        st.error(f"‚ùå Erreur : {e}")
                    except Exception as e:
                        st.error(f"‚ùå Erreur inattendue : {e}")

        # Bouton de t√©l√©chargement (si donn√©es chiffr√©es disponibles)
        if st.session_state.encrypted_data is not None:
            st.markdown("---")
            st.success("‚úÖ Fichier pr√™t √† √™tre t√©l√©charg√©")

            # Cr√©er un fichier temporaire pour le t√©l√©chargement
            with tempfile.NamedTemporaryFile(
                mode="w", delete=False, suffix=".seedphrase"
            ) as tmp_file:
                encryptor.save_encrypted_file(
                    st.session_state.encrypted_data,
                    st.session_state.metadata,
                    tmp_file.name,
                )
                tmp_filepath = tmp_file.name

            # Lire le fichier pour le t√©l√©chargement
            with open(tmp_filepath, "rb") as f:
                file_bytes = f.read()

            # Nettoyer le fichier temporaire
            os.unlink(tmp_filepath)

            with col2:
                st.download_button(
                    label="üì• T√©l√©charger le fichier chiffr√©",
                    data=file_bytes,
                    file_name="encrypted_seedphrase.seedphrase",
                    mime="application/json",
                    use_container_width=True,
                )

            st.info(
                """
                üìå **Conseils de s√©curit√© :**
                - Sauvegardez ce fichier dans plusieurs endroits s√ªrs (cl√© USB, cloud chiffr√©, etc.)
                - Notez votre mot de passe s√©par√©ment et conservez-le en s√©curit√©
                - Testez le d√©chiffrement avant d'effacer votre seed phrase originale
                """
            )

    # ========== ONGLET 2 : D√âCHIFFREMENT ==========
    with tab2:
        st.header("D√©chiffrer votre seed phrase")

        st.markdown(
            """
            Uploadez votre fichier chiffr√© et entrez le mot de passe pour r√©cup√©rer votre seed phrase.
            """
        )

        # Upload du fichier
        uploaded_file = st.file_uploader(
            "Fichier chiffr√©",
            type=["seedphrase", "json"],
            help="S√©lectionnez le fichier .seedphrase que vous avez t√©l√©charg√© lors du chiffrement",
        )

        # Champ mot de passe
        password_decrypt = st.text_input(
            "Mot de passe de d√©chiffrement",
            type="password",
            help="Entrez le mot de passe que vous avez utilis√© pour chiffrer la seed phrase",
            key="password_decrypt",
        )

        # Bouton de d√©chiffrement
        decrypt_button = st.button("üîì D√©chiffrer", type="primary")

        if decrypt_button:
            if uploaded_file is None:
                st.error("‚ùå Veuillez uploader un fichier chiffr√©")
            elif not password_decrypt:
                st.error("‚ùå Veuillez entrer le mot de passe")
            else:
                try:
                    # Sauvegarder temporairement le fichier upload√©
                    with tempfile.NamedTemporaryFile(
                        delete=False, suffix=".seedphrase"
                    ) as tmp_file:
                        tmp_file.write(uploaded_file.getvalue())
                        tmp_filepath = tmp_file.name

                    # Charger et d√©chiffrer
                    with st.spinner("D√©chiffrement en cours..."):
                        encrypted_data, metadata = encryptor.load_encrypted_file(
                            tmp_filepath
                        )

                        decrypted_seedphrase = encryptor.decrypt_seedphrase(
                            encrypted_data, password_decrypt, metadata
                        )

                    # Nettoyer le fichier temporaire
                    os.unlink(tmp_filepath)

                    # Stocker dans la session
                    st.session_state.decrypted_seedphrase = decrypted_seedphrase

                    st.success("‚úÖ Seed phrase d√©chiffr√©e avec succ√®s !")

                except InvalidToken:
                    st.error(
                        "‚ùå Mot de passe incorrect ou fichier corrompu. Veuillez r√©essayer."
                    )
                except ValueError as e:
                    st.error(f"‚ùå Erreur : {e}")
                except Exception as e:
                    st.error(f"‚ùå Erreur inattendue : {e}")

        # Afficher la seed phrase d√©chiffr√©e (si disponible)
        if st.session_state.decrypted_seedphrase is not None:
            st.markdown("---")
            st.success("‚úÖ Voici votre seed phrase d√©chiffr√©e :")

            # Afficher dans un code block pour faciliter la copie
            st.code(st.session_state.decrypted_seedphrase, language=None)

            # Bouton pour copier dans le presse-papier
            if st.button("üìã Copier dans le presse-papier"):
                st.write(
                    """
                    <script>
                    navigator.clipboard.writeText('"""
                    + st.session_state.decrypted_seedphrase
                    + """');
                    </script>
                    """,
                    unsafe_allow_html=True,
                )
                st.info("‚úÖ Copi√© ! (utilisez Ctrl+C / Cmd+C manuellement si n√©cessaire)")

            st.warning(
                """
                ‚ö†Ô∏è **Attention :**
                - Notez cette seed phrase imm√©diatement
                - Ne la partagez avec personne
                - Fermez cette page une fois la seed phrase not√©e
                - Assurez-vous que personne ne regarde par-dessus votre √©paule
                """
            )

            # Bouton pour effacer de la m√©moire
            if st.button("üóëÔ∏è Effacer la seed phrase de l'√©cran", type="secondary"):
                st.session_state.decrypted_seedphrase = None
                st.rerun()

    # Pied de page
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666; padding: 20px;'>
            <p>üîê Anonymous Seedphrase Encryptor v1.0</p>
            <p style='font-size: 0.8em;'>
                Chiffrement : Fernet (AES-128-CBC + HMAC) |
                D√©rivation de cl√© : PBKDF2-HMAC-SHA256 (600,000 it√©rations)
            </p>
        </div>
        """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    main()
